extends c

snippet lam "Lambda function" !w
[$1]($2) {${VISUAL}$3}$0
endsnippet

snippet rfor "Range based for"
for (${1:auto ${2:item}} : ${3:container}) {
	${VISUAL}$4
}$0
endsnippet

snippet var "A variable as string and as value"
"${1:variable}" << $1
endsnippet

snippet class "Class header boilerplate" w
#ifndef ${1/.*/\U$0\E/}_H
#define ${1/.*/\U$0\E/}_H

#include <$2>

class ${1:ClassName} : public ${2:QObject}
{
${3:	Q_OBJECT}
	public:
		explicit $1();
		~$1();
};

#endif // ${1/.*/\U$0\E/}_H
endsnippet

snippet met "Method for this class" !b
${1:void} `!v
matchstr(getline(search('\C\(\<\w\+\)\ze::\1', 'nw')), '\C\(\<\w\+\)\ze::\1')
`::${2:memberFunction}($3)
{
	${VISUAL}$0
}
$1 $2($3);
endsnippet

#
# Casts.
#
snippet static "Static cast" w
static_cast<$1>(${2:${VISUAL}})
endsnippet

snippet dynamic "Dynamic cast" w
dynamic_cast<$1>(${2:${VISUAL}})
endsnippet

snippet qoc "QObject cast" w
qobject_cast<$1>(${2:${VISUAL}})
endsnippet

#
# This is Qt specific. I will have to think how to make this less obtrusive for
# non-Qt C++ code.
#
snippet qsl "QStringLiteral" w
QStringLiteral(${1:${VISUAL}})$0
endsnippet

snippet debu "qDebug" !w
qDebug() << ${VISUAL}$0;
endsnippet

snippet defu "qDebug: print current function" !w
qDebug() << Q_FUNC_INFO;
endsnippet

snippet qa "Q_ASSERT" !b
Q_ASSERT(${1:${VISUAL}});
endsnippet

snippet qax "Q_ASSERT_X" !b
Q_ASSERT_X(${1:${VISUAL:condition}}, ${2:Q_FUNC_INFO}, "${3:what}");
endsnippet

snippet qun "Q_UNUSED" !
Q_UNUSED(${VISUAL}$0);
endsnippet

snippet qau "Q_ASSERT followed by Q_UNUSED" !b
Q_ASSERT(${1:${VISUAL}}); Q_UNUSED($1);
endsnippet

snippet conn "Connect signal with slot" !b
connect(${1:this}, SIGNAL(${2:signal signature}), ${3:this}, SLOT(${4:slot signature}));
endsnippet

snippet foreach "Qt's foreach" !b
foreach (${1:variable}, ${2:container}) {
	${VISUAL}$0
}
endsnippet
